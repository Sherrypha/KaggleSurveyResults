RandomForest
#We would test this models accuracy on our test data(dp_training) to get accuracy rate and estimated out-of-sample error
predict_RandomForest <- predict(RandomForest, dp_testing)
confusionMatrix(dp_testing$classe, predict_RandomForest)
accuracy <- confusionMatrix(dp_testing$classe, predict_RandomForest)$overall[1]
error<-1 - as.numeric(confusionMatrix(dp_testing$classe, predict_RandomForest)$overall[1])
View(dp_training)
ggcorrplot(cor(confusionMatrix[["table"]],method="s"),
lab = TRUE,
lab_size = 3,
lab_col ="yellow",
colors = c("skyblue","blue" ,"navyblue"),
title="Randomforest Test Correlation Matrix",
ggtheme=ggplot2::theme_gray())
ggcorrplot(cor(confusionMatrix[["table"]],method="s"),
lab = TRUE,
lab_size = 5,
lab_col ="yellow",
colors = c("skyblue","blue" ,"navyblue"),
title="Randomforest Test Correlation Matrix",
ggtheme=ggplot2::theme_gray())
colnames(p_training)
set.seed(123)
tc <- trainControl(method="cv", 5)
RandomForest <- train(classe ~ ., data=dp_training, method="rf",trControl=tc, ntree=250)
View(RandomForest)
dim(training);dim(testing)
##Note that both dataset are having the same variables (160 variables). Next is try remove the near zero variance variables or columns that contain N/A missing values.
features <- names(testing[,colSums(is.na(testing)) == 0])[8:59]
# Only use features used in testing cases.
p_training <- training[,c(features,"classe")]
p_testing <- testing[,c(features,"problem_id")]
dim(p_training); dim(p_testing);
# see Appendixs for processed data column names
ggcorrplot(cor(confusionMatrix(dp_testing$classe, predict_RandomForest)[["table"]],method="s"),
lab = TRUE,
lab_size = 5,
lab_col ="yellow",
colors = c("skyblue","blue" ,"navyblue"),
title="Randomforest Test Correlation Matrix",
ggtheme=ggplot2::theme_gray())
plot(RandomForest)
varImpPlot(RandomForest,type=2)
y(caret)
library(caret)
varImpPlot(RandomForest,type=2)
set.seed(123)
tc <- trainControl(method="cv", 5)
RandomForest <- train(classe ~ ., data=dp_training, method="rf",trControl=tc, ntree=250,importance=TRUE)
RandomForest
#We would test this models accuracy on our test data(dp_training) to get accuracy rate and estimated out-of-sample error
predict_RandomForest <- predict(RandomForest, dp_testing)
confusionMatrix(dp_testing$classe, predict_RandomForest)
accuracy <- confusionMatrix(dp_testing$classe, predict_RandomForest)$overall[1]
error<-1 - as.numeric(confusionMatrix(dp_testing$classe, predict_RandomForest)$overall[1])
varImpPlot(RandomForest,type=2)
importance(RandomForest)
importance(RandomForest$finalModel)
RandomForest[["finalModel"]][["importance"]]
varImpPlot(RandomForest[["finalModel"]][["importance"]])
library(randomForest)
varImpPlot(RandomForest[["finalModel"]][["importance"]])
varImpPlot(RandomForest[["finalModel"]])
RandomForest[["finalModel"]][["importance"]]
imp<-RandomForest[["finalModel"]][["importance"]]
View(imp)
imp[,1]
imp[1,]
ggplot(imp, aes(x=`car name`, y=mpg_z, label=mpg_z)) +
geom_point(stat='identity', aes(col=mpg_type), size=6)  +
row.names(imp)
ggplot(imp, aes(x=`car name`, y=mpg_z, label=mpg_z)) +
geom_point(stat='identity', aes(col=mpg_type), size=6)  +
rownames(imp)
ggplot(imp, aes(x=`car name`, y=mpg_z, label=mpg_z)) +
geom_point(stat='identity', aes(col=mpg_type), size=6)  +
rownames(imp)
ggplot(imp, aes(x=`car name`, y=mpg_z, label=mpg_z)) +
geom_point(stat='identity', aes(col=mpg_type), size=6)  +
rownames(imp[1,])
ggplot(imp, aes(x=`car name`, y=mpg_z, label=mpg_z)) +
geom_point(stat='identity', aes(col=mpg_type), size=6)  +
colnames(imp)
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
View(imp)
imp[1,]
imp[,1]
row.names(imp)
ggplot(imp, aes(x=imp$MeanDecreaseAccuracy, y=row.names(imp), label=mpg_z)) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot") +
ylim(-2.5, 2.5) +
coord_flip()
ggplot(imp, aes(x=imp$MeanDecreaseAccuracy, y=row.names(imp),
label=percent(imp$MeanDecreaseAccuracy))) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot") +
ylim(-2.5, 2.5) +
coord_flip()
ggplot(imp, aes(x=imp$MeanDecreaseAccuracy, y=row.names(imp),
label=percent(imp$MeanDecreaseAccuracy))) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
varImpPlot(RandomForest[["finalModel"]], main ="Feautures Importance measured by the zFitted Model", color=)
ggplot(imp, aes(x=imp$MeanDecreaseAccuracy, y=row.names(imp),
label=percent(imp$MeanDecreaseAccuracy))) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
ggplot(imp, aes(x=percent(imp$MeanDecreaseAccuracy), y=row.names(imp),
label=percent(imp$MeanDecreaseAccuracy))) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
varImpPlot(RandomForest[["finalModel"]], main ="Feautures Importance measured by the zFitted Model", color=)
ggplot(reorder(imp,imp$MeanDecreaseAccuracy) , aes(x=percent(imp$MeanDecreaseAccuracy), y=row.names(imp),
label=percent(imp$MeanDecreaseAccuracy))) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
reorder(imp,imp$MeanDecreaseAccuracy)
order(imp,MeanDecreaseAccuracy)
order(imp,imp$MeanDecreaseAccuracy)
arrange(imp,ascending(imp$MeanDecreaseAccuracy))
arrange(imp,asc(imp$MeanDecreaseAccuracy))
arrange(imp,imp$MeanDecreaseAccuracy)
ggplot(imp , aes(x=percent(imp$MeanDecreaseAccuracy), y=row.names(imp),
label=percent(imp$MeanDecreaseAccuracy))) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
imp<-arrange(imp,imp$MeanDecreaseAccuracy)
ggplot(imp , aes(x=percent(imp$MeanDecreaseAccuracy), y=row.names(imp),
label=percent(imp$MeanDecreaseAccuracy))) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
cbind(row.names(imp),imp)
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
cbind(row.names(imp),imp)
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
imp<-cbind(row.names(imp),imp)
imp<-arrange(imp,imp$MeanDecreaseAccuracy)
ggplot(imp , aes(x=percent(imp$MeanDecreaseAccuracy), y=row.names(imp),
label=percent(imp$MeanDecreaseAccuracy))) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
ggplot(imp , aes(x=percent(imp$MeanDecreaseAccuracy), y=imp$`row.names(imp)`,
label=percent(imp$MeanDecreaseAccuracy))) +
geom_point(stat='identity', aes(col=imp$MeanDecreaseAccuracy), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
as.vector(importance(RandomForest[["finalModel"]))
as.vector(importance(RandomForest[["finalModel"])
as.vector(importance(RandomForest[["finalModel"]])
as.vector(importance(RandomForest[["finalModel"]]))
as.vector(importance(RandomForest[["finalModel"]]))
data.frame(RandomForest[["finalModel"]]$xNames, as.vector(importance(RandomForest[["finalModel"]]))
data.frame(RandomForest[["finalModel"]]$xNames, as.vector(importance(RandomForest[["finalModel"]])))
data.frame(RandomForest[["finalModel"]]$xNames,as.vector(importance(RandomForest[["finalModel"]])))
imp<-data.frame(feauture=RandomForest[["finalModel"]]$xNames,importance=as.vector(importance(RandomForest[["finalModel"]])))
imp<-data.frame(feature=RandomForest[["finalModel"]]$xNames,importance=as.vector(importance(RandomForest[["finalModel"]])))
ggplot(arrange(imp,importance) , aes(x=importance, y=feature,
label=importance)) +
geom_point(stat='identity', aes(col=importance), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
ggplot(arrange(imp,desc(importance) , aes(x=importance, y=feature,
ggplot(arrange(imp,desc(importance)) , aes(x=importance, y=feature,
label=importance)) +
geom_point(stat='identity', aes(col=importance), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized mileage from 'mtcars': Dotplot")
ggplot(arrange(imp,desc(importance)) , aes(x=importance, y=feature,               label=importance)) +
ggplot(arrange(imp,desc(importance)) , aes(x=importance, y=feature,               label=importance)) +
geom_point(stat='identity', aes(col=importance), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot")
ggplot(arrange(imp,desc(importance)) , aes(x=importance, y=reorder(feature,importance),               label=importance)) +
geom_point(stat='identity', aes(col=importance), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot")
geom_point(stat='identity', aes(col=importance), size=6)  +
ggplot(arrange(imp,desc(importance)) , aes(x=importance, y=reorder(feature,importance)) +
ggplot(imp, aes(x=importance, y=reorder(feature,importance))) +
geom_point(stat='identity', aes(col=importance), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot")
ggplot(arrange(imp,desc(importance)) , aes(x=importance, y=reorder(feature,importance))) +
ggplot(imp, aes(x=importance, y=reorder(feature,importance))) +
geom_point(stat='identity', aes(col=importance), size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot")
ggplot(imp, aes(x=importance, y=reorder(feature,importance))) +
geom_point(stat='identity', aes(col=importance), size=6)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot")
ggplot(imp, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity', aes(col=importance), size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot")
View(imp)
ggplot(imp, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot")
ggplot(imp, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot") +  ylim(-2.5, 2.5) +
coord_flip()
ggplot(imp, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot") +
coord_flip()
imp<-data.frame(feature=RandomForest[["finalModel"]]$xNames,importance=as.vector(importance(RandomForest[["finalModel"]])))
imp<-data.frame(feature=RandomForest[["finalModel"]]$xNames,importance=as.vector(RandomForest[["finalModel"]][["importance"]])))
imp<-data.frame(feature=RandomForest[["finalModel"]]$xNames,
importance=as.vector(RandomForest[["finalModel"]][["importance"]]))
RandomForest[["finalModel"]][["importance"]]
imp<-data.frame(feature=RandomForest[["finalModel"]]$xNames,
importance=as.vector(RandomForest[["finalModel"]][["importance"]]$MeanDecreaseGini))
imp<-data.frame(feature=RandomForest[["finalModel"]]$xNames,
importance=as.vector(RandomForest[["finalModel"]][["importance"]][["MeanDecreaseGini"]]))
RandomForest[["finalModel"]][["importance"]][["MeanDecreaseGini"]]
x<-RandomForest[["finalModel"]][["importance"]][["MeanDecreaseGini"]]
x<-RandomForest[["finalModel"]][["importance"]]
x<-data.frame(RandomForest[["finalModel"]][["importance"]])
rownames(x)
x$MeanDecreaseGini
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
ggplot(imp, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot") +
coord_flip()
ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot") +
coord_flip()
varImpPlot(RandomForest[["finalModel"]], main ="Feautures Importance measured by the zFitted Model", color=)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot") +
coord_flip()
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot") +           coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot") +           coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2)
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
xlab="Feature",
ylab="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot") +
labs(title="Mean Decrease in Accuracy",
xlab="Feature",
ylab="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Features Importance measured by the Fitted Model"  )
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
xlab="Feature",
ylab="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Diverging Dot Plot", subtitle="Normalized mileage from 'mtcars': Dotplot") +
labs(title="Mean Decrease in Accuracy",
xlab="Feature",
ylab="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Feature Importance measured by the Fitted Model"  )
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
xlab="Feature",
ylab="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Accuracy",
xlab="Feature",
ylab="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Feature Importance measured by the Fitted Model"  )
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
xlab="Feature",
ylab="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Accuracy",
xlab="Feature",
ylab="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Feature Importance measured by the Fitted Model"  )
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
xlab="Feature",
ylab="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Accuracy",
xlab="Feature",
ylab="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Feature Importance measured by the Fitted Model"  )
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
xlab="Feature",
ylab="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Accuracy",
xlab="Feature",
ylab="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Feature Importance measured by the Fitted Model"  )
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
xlab="Feature",
ylab="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(Feature= rownames(imp),
Importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Accuracy",
xlab="Feature",
ylab="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Feature Importance measured by the Fitted Model"  )
##Variable Importance Plots
```{r fig.width=10, fig.height=8 ,cache=TRUE}
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
xlab="Feature",
ylab="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Accuracy",
xlab="Feature",
ylab="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Feature Importance measured by the Fitted Model"  )
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
xlab="Feature",
ylab="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Accuracy",
x="Feature",
y="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Feature Importance measured by the Fitted Model"  )
imp<-data.frame(RandomForest[["finalModel"]][["importance"]])
mdg<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseGini)
mdgplot<- ggplot(mdg, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Impurity",
x="Feature",
y="Mean Decrease Gini") +
coord_flip()
mda<-data.frame(feature= rownames(imp),
importance=imp$MeanDecreaseAccuracy)
mdaplot<- ggplot(mda, aes(y=importance, x=reorder(feature,importance))) +
geom_point(stat='identity',aes(col=importance),  size=3)  +
labs(title="Mean Decrease in Accuracy",
x="Feature",
y="Mean Decrease in Accuracy") +
coord_flip()
grid.arrange(mdgplot, mdaplot, ncol=2, top="Feature Importance measured by the Fitted Model"  )
kable(colnames(training))
knitr::kable(colnames(training))
shiny::runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(geojsonio)
library(sp)
library(tidyr)
library(tidyverse)
library(plotly)
##get Kaggle data in a tibble
ks_data<-tbl_df(read.csv("data/multipleChoiceResponses.csv"))
c(levels(ks_data$Q3)[-(21:22)])
runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
ks_data%>%
filter(Q3!= c("I do not wish to disclose my location" ,"In which country do you currently reside?"),
Q3==. )
ks_data%>%
filter(Q3!= c("I do not wish to disclose my location" ,"In which country do you currently reside?"),
Q3=="." )
runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
runApp('C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results/Kaggle_Survey_Results')
ks_data<-tbl_df(read.csv("Data/multipleChoiceResponses.csv"))
ks_data<-tbl_df(read.csv("../Data/multipleChoiceResponses.csv"))
setwd("C:/Users/Sherifat A-Shitu/OneDrive/Documents/datasciencecoursera/Developing Data Products/Kaggle Survey Results")
ks_data<-tbl_df(read.csv("Data/multipleChoiceResponses.csv"))
head(ks_data)
head(ks_data[Q3])
##List of countries
levels(ks_data$Q3)
##Gender distribution
levels(ks_data$Q1)
##Gender distribution
table(ks_data$Q1)
##Gender distribution
kable(table(ks_data$Q1))
##Gender distribution
knitr::kable((table(ks_data$Q1))
##Gender distribution
knitr::kable((table(ks_data$Q1))
##Gender distribution
knitr::kable((table(ks_data$Q1)))
##List of countries
knitr::kable(table(ks_data$Q3))
##Gender distribution
knitr::kable(head((table(ks_data$Q1))))
##Gender distribution
knitr::kable(head((table(ks_data$Q3))))
##Gender distribution
knitr::kable((table(ks_data$Q1)))
##List of countries
knitr::kable(head(table(ks_data$Q3)))
